

user nobody;# 工作进程的属主
worker_processes  1;
error_log /usr/local/etc/nginx/logs/error.log;

events {
  worker_connections  1024;
}

# 请求限制
limit_conn_zone $binary_remote_addr zone=coon_zone:10m rate=1r/s;

http {
    include       mime.types;
    default_type  application/octet-stream;

    client_max_body_size 8M;
    client_body_buffer_size 100M;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，
    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }

    server {
        listen 80;
        # conn_zone 设置对应的共享内存区域 1是限制的数量
        limit_conn conn_zone 1;
        server_name: 47.97.27.23;

        # server_name localhost;
        # node-server接口
        location /api {
            gzip on;
            gzip_min_length 1k;
            gzip_buffers 4 8k;
            gzip_http_version 1.1;
            gzip_types text/plain application/x-javascript text/css application/xml;
            proxy_pass http://localhost:4000;
        }

        # pc和h5站点区分
        location /api/backend {
             # 移动、pc设备适配
            if ($http_user_agent ~* '(Android|webOS|iPhone|iPod|BlackBerry)') {
                set $mobile_request '1';
            }
            if ($mobile_request = '1') {
                # rewrite ^.+ http://mysite-base-H5.com;
            }
        }

        # socket.io 
        location /socket.io/ {
            proxy_pass http://localhost:3001;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
        }

        # 静态资源接口
        # “~” 匹配时区分大小写
        # “~*” 匹配时不区分大小写
        # “=” 精确匹配字符和字符串“^~”  
        # “^~” 例如： ^~ /images/ 匹配到任何以images开头的，便停止搜索。
        location ~ \.(gif|jpg|png|htm|html|css|js|flv|ico|swf|txt|mp4|jpeg|avi|rmvb)(.*){
            root /movie/server;
            access_log off;
            expires 24h;
            # 请求host传递给后端
            #proxy_set_header Host $http_host;
            # 请求ip传给后端
            #proxy_set_header X-Real-IP $remote_addr;
            # 请求协议传递给后端
            #proxy_set_header X-Schema $schema;
            # 路径重写
            #rewrite /api/(.*) /$1 break;

            # 防盗链
            # 通过 valid_referers 定义合法的地址白名单 $invalid_referer 不合法的返回403      
            valid_referers none blocked 127.0.0.1;    
            if ($invalid_referer) {        
                return 403;    
            }
        }

        # # 图片处理 额外模块(ngx_http_image_filter_module)
        # location ~* /image/(.+)$ {
        #     alias /home/server/source/static/image/$1; #图片服务端储存地址
        #     set $width -; #图片宽度默认值
        #     set $height -; #图片高度默认值
        #     if ($arg_width != "") {
        #         set $width $arg_width;
        #     }
        #     if ($arg_height != "") {
        #         set $height $arg_height;
        #     }
        #     image_filter resize $width $height; #设置图片宽高
        #     image_filter_buffer 10M;   #设置Nginx读取图片的最大buffer。
        #     image_filter_interlace on; #是否开启图片图像隔行扫描
        #     error_page 415 = 415.png; #图片处理错误提示图，例如缩放参数不是数字
        # }
        
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
    include servers/*;
}
